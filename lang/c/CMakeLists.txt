cmake_minimum_required(VERSION 3.2 FATAL_ERROR)
project(aws-iot-cpp-lang-c CXX)

######################################
# Section : Disable in-source builds #
######################################

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
	message( FATAL_ERROR "In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there. You may need to remove CMakeCache.txt and CMakeFiles folder." )
endif()

########################################
# Section : Common Build setttings #
########################################
# Set required compiler standard to standard c++11. Disable extensions.
set(CMAKE_CXX_STANDARD 11) # C++11...
set(CMAKE_CXX_STANDARD_REQUIRED ON) #...is required...
set(CMAKE_CXX_EXTENSIONS OFF) #...without compiler extensions like gnu++11

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/archive)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Configure Compiler flags
if(UNIX AND NOT APPLE)
	# Prefer pthread if found
	set(THREADS_PREFER_PTHREAD_FLAG ON)
	set(CUSTOM_COMPILER_FLAGS "-fno-exceptions -Wall -Werror")
elseif(APPLE)
	set(CUSTOM_COMPILER_FLAGS "-fno-exceptions")
elseif(WIN32)
	set(CUSTOM_COMPILER_FLAGS "/W4")
endif()

########################################
# Target : Build Lang C Shared Library #
########################################
set(C_LIB_TARGET_NAME aws-iot-sdk-cpp-c)

# Set Sources
set(C_LIB_SRC_BASE_DIR "${CMAKE_SOURCE_DIR}/lang/c")
set(C_LIB_SRCS
    "${C_LIB_SRC_BASE_DIR}/network_connection.cpp"
    "${C_LIB_SRC_BASE_DIR}/mqtt_client.cpp"
    "${C_LIB_SRC_BASE_DIR}/shadow.cpp"
)

# Add Target
add_library(${C_LIB_TARGET_NAME} SHARED ${C_LIB_SRCS})

# Add Target specific includes
target_include_directories(${C_LIB_TARGET_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/lang/c)
target_include_directories(${C_LIB_TARGET_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/include/lang/c)

# Configure Threading library
find_package(Threads REQUIRED)

# Add SDK includes
target_include_directories(${C_LIB_TARGET_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/include)

target_link_libraries(${C_LIB_TARGET_NAME} PUBLIC "Threads::Threads")
target_link_libraries(${C_LIB_TARGET_NAME} PUBLIC ${SDK_TARGET_NAME})

set_property(TARGET ${C_LIB_TARGET_NAME} APPEND_STRING PROPERTY COMPILE_FLAGS ${CUSTOM_COMPILER_FLAGS})
set_property(TARGET ${SDK_TARGET_NAME} APPEND_STRING PROPERTY COMPILE_FLAGS "-fPIC")


#if(MSVC)
#	target_sources(${PUB_SUB_SAMPLE_TARGET_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/common/ConfigCommon.hpp)
#	source_group("Header Files\\Samples\\PubSub" FILES ${CMAKE_SOURCE_DIR}/common/ConfigCommon.hpp)
#	source_group("Source Files\\Samples\\PubSub" FILES ${CMAKE_SOURCE_DIR}/common/ConfigCommon.cpp)
#
#	target_sources(${PUB_SUB_SAMPLE_TARGET_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/samples/PubSub/PubSub.hpp)
#	source_group("Header Files\\Samples\\PubSub" FILES ${CMAKE_SOURCE_DIR}/samples/PubSub/PubSub.hpp)
#	source_group("Source Files\\Samples\\PubSub" FILES ${CMAKE_SOURCE_DIR}/samples/PubSub/PubSub.cpp)
#endif()

#########################
# Add Network libraries #
#########################

set(NETWORK_WRAPPER_DEST_TARGET ${C_LIB_TARGET_NAME})
include(${CMAKE_SOURCE_DIR}/network/CMakeLists.txt.in)
